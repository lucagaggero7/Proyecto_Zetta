@page "/CrearPresupuesto/{contratoId:int}"
@using Proyecto_Zetta.Shared.DTO
@inject IHttpServicio http
@inject NavigationManager nav

<h3>Nuevo Presupuesto</h3>

<!-- Contenedor de la tarjeta con sombra -->
<div class="card shadow-lg p-4" style="max-width: 800px; margin: auto;">
    <div class="card-header">
        <h4>Formulario de Presupuesto</h4>
    </div>

    <EditForm Model="presupuesto" OnValidSubmit="Grabar">
        <DataAnnotationsValidator />

        <div class="card-body">
            <div class="form-group">
                <label>Tipo</label>
                <div>
                    <InputText class="form-control" @bind-Value="@presupuesto.Tipo" />
                    <ValidationMessage For="@(() => presupuesto.Tipo)" />
                </div>
            </div>

            <div class="form-group">
                <label for="materialesIncluidos" class="d-block">Materiales Incluidos</label>
                <div class="d-flex align-items-center">
                    <!-- Switch -->
                    <input type="checkbox" class="form-check-input-modern" id="materialesIncluidos" @bind="presupuesto.MaterialesIncl" />

                    <!-- Texto Sí/No -->
                    <span class="ms-2">@((presupuesto.MaterialesIncl ? "Sí" : "No"))</span>
                </div>
            </div>



            <div class="form-group">
                <label>Insumos</label>
                <div>
                    <InputNumber class="form-control" @bind-Value="@presupuesto.Insumos" />
                    <ValidationMessage For="@(() => presupuesto.Insumos)" />
                </div>
            </div>

            <div class="form-group">
                <label>Mano de obra</label>
                <div>
                    <InputNumber class="form-control" @bind-Value="@presupuesto.ManodeObra" />
                    <ValidationMessage For="@(() => presupuesto.ManodeObra)" />
                </div>
            </div>

            <div class="form-group">
                <label>Forma de Pago</label>
                <div>
                    <select class="form-control" @bind="presupuesto.FormadePagoId">
                        <option value="">Seleccione una forma de pago</option>
                        @foreach (var formasdepago in listaFormasdePago)
                        {
                            <option value="@formasdepago.Id">@formasdepago.Nombre</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => presupuesto.FormadePagoId)" />
                </div>
            </div>

            <div class="form-group">
                <label>Item Tipo</label>
                <div>
                    <select class="form-control" @bind="presupuesto.ItemTipoId">
                        <option value="">Seleccione un item tipo</option>
                        @foreach (var itemstipo in listaItemsTipo)
                        {
                            <option value="@itemstipo.Id">@itemstipo.Nombre</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => presupuesto.ItemTipoId)" />
                </div>
            </div>

            <br />

            <!-- Botones de acción -->
            <div class="form-group">
                <button class="btn btn-primary btn-lg" type="submit">Aceptar</button>
                <button class="btn btn-secondary btn-lg" @onclick="Cancelar">Cancelar</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public int contratoId { get; set; }
    private CrearPresupuestoDTO presupuesto = new CrearPresupuestoDTO();
    private List<FormadePago> listaFormasdePago = new List<FormadePago>();
    private List<ItemTipo> listaItemsTipo = new List<ItemTipo>();

    protected override async Task OnInitializedAsync()
    {
        presupuesto.ObraId = contratoId;
        presupuesto.Estado = "Aceptado";

        await CargarFormasdepago();
        await CargarItemsTipo();
    }

    private async Task CargarFormasdepago()
    {
        var respuesta = await http.Get<List<FormadePago>>("api/FormasdePago");
        if (!respuesta.Error)
        {
            listaFormasdePago = respuesta.Respuesta;
        }
    }

    private async Task CargarItemsTipo()
    {
        var respuesta = await http.Get<List<ItemTipo>>("api/ItemsTipo");
        if (!respuesta.Error)
        {
            listaItemsTipo = respuesta.Respuesta;
        }
    }

    public class FormadePago
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
    }

    public class ItemTipo
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public long Insumos { get; set; }
        public long ManodeObra { get; set; }
        public long PrecioFinal { get; set; }
    }

    private async Task Grabar()
    {
        presupuesto.PrecioFinal = presupuesto.Insumos + presupuesto.ManodeObra;
        var httpRespuesta = await http.Post<CrearPresupuestoDTO>("api/Presupuestos", presupuesto);
        if (httpRespuesta.Error)
        {
            var body = httpRespuesta.HttpResponseMessage;
        }
        nav.NavigateTo($"/Contratos?expandId={contratoId}");
    }

    private void Cancelar()
    {
        nav.NavigateTo("/Presupuestos");
    }
}
