@page "/ItemsTipo/crear"
@using Proyecto_Zetta.Shared.DTO
@inject IHttpServicio http
@inject NavigationManager nav

<div class="container">
    <h3 class="title">Nuevo Item Tipo</h3>

    <EditForm Model="itemtipo" OnValidSubmit="Grabar">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Nombre</label>
            <InputText class="form-control" @bind-Value="@itemtipo.Nombre" />
            <ValidationMessage For="@(() => itemtipo.Nombre)" />
        </div>

        <div class="form-group">
            <label>Insumos</label>
            <InputNumber class="form-control" @bind-Value="@itemtipo.Insumos" />
            <ValidationMessage For="@(() => itemtipo.Insumos)" />
        </div>

        <div class="form-group">
            <label>Mano de Obra</label>
            <InputNumber class="form-control" @bind-Value="@itemtipo.ManodeObra" />
            <ValidationMessage For="@(() => itemtipo.ManodeObra)" />
        </div>

        <div class="form-group">
            <label>Precio Final</label>
            <InputNumber class="form-control" @bind-Value="@itemtipo.PrecioFinal" />
            <ValidationMessage For="@(() => itemtipo.PrecioFinal)" />
        </div>

        <!-- Selección de materiales con Toggle Buttons -->
        <div class="form-group">
            <label>Seleccionar Materiales</label>
            <div class="toggle-button-container">
                @foreach (var material in materiales)
                {
                    <button type="button"
                            class="toggle-button @(itemtipo.MaterialesIds.Contains(material.Id) ? "active" : "")"
                            @onclick="() => OnToggleChange(material.Id)">
                        @if (itemtipo.MaterialesIds.Contains(material.Id))
                        {
                            <span>&#10003; <!-- Checkmark (✔) --> </span>
                        }
                        @material.Nombre
                    </button>
                }
            </div>
            <ValidationMessage For="@(() => itemtipo.MaterialesIds)" />
        </div>

        <div class="button-group">
            <button class="btn btn-primary" type="submit">Aceptar</button>
            <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
        </div>
    </EditForm>
</div>

<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .title {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 20px;
        color: #343a40;
        text-align: center;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            font-weight: bold;
            color: #343a40;
        }

    .form-control {
        padding: 10px;
        font-size: 1rem;
    }

    .button-group {
        display: flex;
        justify-content: space-between;
    }

    .btn {
        padding: 10px 20px;
        font-weight: bold;
    }

    /* Contenedor de botones */
    .toggle-button-container {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 10px;
        border: 1px solid #ddd;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    /* Estilos base para cada botón */
    .toggle-button {
        padding: 12px 20px;
        font-size: 1rem;
        text-align: center;
        border: 2px solid transparent;
        border-radius: 5px;
        cursor: pointer;
        background-color: #e9ecef;
        color: #343a40;
        transition: all 0.3s ease;
    }

        .toggle-button:hover {
            background-color: #dee2e6;
        }

        /* Estilo para el botón activo */
        .toggle-button.active {
            background-color: #28a745;
            color: white;
            border-color: #218838;
            box-shadow: 0 4px 8px rgba(40, 167, 69, 0.4);
        }

        /* Estilo para el checkmark */
        .toggle-button span {
            margin-right: 8px;
        }
</style>

@code {
    private CrearItemTipoDTO itemtipo = new CrearItemTipoDTO();
    private List<Material> materiales = new List<Material>(); // Lista de materiales disponibles

    protected override async Task OnInitializedAsync()
    {
        // Cargar los materiales desde la API
        var httpRespuesta = await http.Get<List<Material>>("api/Materiales");
        if (!httpRespuesta.Error)
        {
            materiales = httpRespuesta.Respuesta;
        }
    }

    // Método para manejar el cambio de selección de materiales
    private void OnToggleChange(int materialId)
    {
        if (itemtipo.MaterialesIds.Contains(materialId))
        {
            // Eliminar el ID si ya está seleccionado
            itemtipo.MaterialesIds.Remove(materialId);
        }
        else
        {
            // Agregar el ID si no está seleccionado
            itemtipo.MaterialesIds.Add(materialId);
        }
    }

    private async Task Grabar()
    {
        // Asignar los materiales seleccionados a la propiedad MaterialIds
        var httpRespuesta = await http.Post<CrearItemTipoDTO>("api/ItemsTipo", itemtipo);
        if (!httpRespuesta.Error)
        {
            nav.NavigateTo("/ItemsTipo");
        }
        else
        {
            // Manejo de error
            var body = httpRespuesta.HttpResponseMessage;
        }
    }

    private void Cancelar()
    {
        nav.NavigateTo("/ItemsTipo");
    }
}
