@page "/Contratos/editar/{contratoId:int}"
@using Proyecto_Zetta.Shared.DTO
@inject IHttpServicio http
@inject NavigationManager nav

<h3>Editar Contrato</h3>

<!-- Contenedor de la tarjeta con sombra -->
<div class="card shadow-lg p-4" style="max-width: 800px; margin: auto;">
    <div class="card-header">
        <h4>Formulario de Contrato</h4>
    </div>

    <EditForm Model="obra" OnValidSubmit="Grabar">
        <DataAnnotationsValidator />

        <div class="card-body">
            <div class="form-group">
                <label>Descripcion</label>
                <div>
                    <InputText class="form-control" @bind-Value="@obra.Descripcion" />
                    <ValidationMessage For="@(() => obra.Descripcion)" />
                </div>
            </div>

            <div class="form-group">
                <label for="anexarServicio">Anexar Servicio</label>
                <div>
                    <select id="anexarServicio" class="form-control" @bind="obra.AnexarServicio">
                        <option value="N/A">N/A</option>
                        <option value="Mamposteria">Mampostería</option>
                        <option value="Pintura">Pintura</option>
                        <option value="Plomeria">Plomería</option>
                        <option value="Electricidad">Electricidad</option>
                    </select>
                    <ValidationMessage For="@(() => obra.AnexarServicio)" />
                </div>
            </div>

            <div class="form-group">
                <label>Instalador</label>
                <div>
                    <InputSelect class="form-control" @bind-Value="@obra.InstaladorId">
                        <option value="">Seleccione un instalador</option>
                        @foreach (var instalador in listaInstaladores)
                        {
                            <option value="@instalador.Id">@instalador.NombreCompleto</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => obra.InstaladorId)" />
                </div>
            </div>

            <div class="form-group">
                <label>Cliente</label>
                <div>
                    <InputSelect class="form-control" @bind-Value="@obra.ClienteId">
                        <option value="">Seleccione un cliente</option>
                        @foreach (var cliente in listaClientes)
                        {
                            <option value="@cliente.Id">@cliente.NombreCompleto</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => obra.ClienteId)" />
                </div>
            </div>

            <br />

            <!-- Botones de acción -->
            <div class="form-group">
                <button class="btn btn-primary btn-lg" type="submit">Aceptar</button>
                <button class="btn btn-secondary btn-lg" @onclick="Cancelar">Cancelar</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public int contratoId { get; set; }
    private EditarObraDTO obra = new EditarObraDTO();
    private List<Instalador> listaInstaladores = new List<Instalador>();
    private List<Cliente> listaClientes = new List<Cliente>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await CargarInstaladores();
        await CargarClientes();
        await Mostrar();
    }

    private async Task Mostrar()
    {
        var respuesta = await http.Get<EditarObraDTO>($"api/Contratos/GetById/{contratoId}");

        if (!respuesta.Error)
        {
            obra = respuesta.Respuesta;
        }
        else
        {
            nav.NavigateTo("/Contratos");
        }
    }

    private async Task CargarInstaladores()
    {
        var respuesta = await http.Get<List<Instalador>>("api/Instaladores");
        if (!respuesta.Error)
        {
            listaInstaladores = respuesta.Respuesta;
        }
    }

    private async Task CargarClientes()
    {
        var respuesta = await http.Get<List<Cliente>>("api/Clientes");
        if (!respuesta.Error)
        {
            listaClientes = respuesta.Respuesta;
        }
    }

    private async Task Grabar()
    {
        var httpRespuesta = await http.Put<EditarObraDTO>($"api/Contratos/{contratoId}", obra);
        if (httpRespuesta.Error)
        {
            var body = httpRespuesta.HttpResponseMessage;
        }
        nav.NavigateTo("/Contratos");
    }

    private void Cancelar()
    {
        nav.NavigateTo("/Contratos");
    }

    public class Instalador
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string NombreCompleto => $"{Nombre} {Apellido}";
    }

    public class Cliente
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string NombreCompleto => $"{Nombre} {Apellido}";
    }
}
