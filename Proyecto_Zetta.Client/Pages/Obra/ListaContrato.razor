@page "/Contratos"
@using Proyecto_Zetta.Shared.DTO

@inject IHttpServicio http
@inject IJSRuntime js
@inject AlertaServicio Alerta
@inject NavigationManager Navigation
@inject HttpClient Http

<div class="container">
    <h3 class="title">Lista de Contratos</h3>

    <a class="btn btn-add mb-4" href="/Contratos/crear">
        <i class="bi bi-plus-circle me-2"></i> Nuevo Contrato
    </a>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle-fill"></i> Error: @Mensaje
        </div>
    }
    else if (listaContratos == null)
    {
        <p class="loading-text"><i class="bi bi-arrow-repeat"></i> Buscando...</p>
    }
    else if (listaContratos.Count == 0)
    {
        <p class="no-data-text"><i class="bi bi-folder-x"></i> No existen contratos</p>
    }
    else
    {
        <div class="row mt-4">
            <!-- Añadir margen superior a las tarjetas -->
            @foreach (var item in listaContratos)
            {
                <div class="col-md-4 mb-4">
                    <div class="card shadow-lg rounded">
                        <div class="card-body">
                            <h5 class="card-title">
                                @item.Descripcion
                            </h5>
                            <span class="@GetEstadoClase(item.Estado)">
                                @item.Estado
                            </span><br />
                            <p class="card-text">
                                <strong>Fecha de Alta:</strong> @item.FechaAlta.ToString("dd/MM/yyyy")<br />
                                <strong>Instalador:</strong> @(nombresInstaladores.ContainsKey(item.InstaladorId) ? nombresInstaladores[item.InstaladorId] : "Desconocido")<br />
                                <strong>Cliente:</strong> @(nombresClientes.ContainsKey(item.ClienteId) ? nombresClientes[item.ClienteId] : "Desconocido")
                            </p>

                            <!-- Subcontenedor para agrupar botones -->
                            <div class="button-group">
                                <button class="btn btn-expand btn-sm" @onclick="() => ExpandirPresupuestos(item.Id)" title="Ver presupuestos">
                                    <i class="bi bi-chevron-down"></i>
                                </button>
                                <button class="btn btn-edit btn-sm" @onclick="() => Editar(item.Id)" title="Editar contrato">
                                    <i class="bi bi-pencil-fill icon-size"></i>
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(item.Id)" title="Eliminar contrato">
                                    <i class="bi bi-trash-fill icon-size"></i>
                                </button>
                                <button class="btn btn-primary btn-sm" @onclick="() => AgregarPresupuesto(item.Id)" title="Agregar Presupuesto">
                                    <i class="bi bi-plus-circle icon-size"></i>
                                </button>
                                <button class="btn btn-warning btn-sm @(item.Estado == "Inactivo" ? "disabled" : "")" @onclick="() => BajaObra(item.Id)" title="Dar de baja">
                                    <i class="bi bi-file-earmark-excel icon-size"></i>
                                </button>
                            </div>
                        </div>

                        @if (item.Id == idSeleccionado)
                        {
                            <div class="card-footer">
                                @if (presupuestos.Any(p => p.ObraId == item.Id))
                                {
                                    <ul class="list-group">
                                        @foreach (var presupuesto in presupuestos.Where(p => p.ObraId == item.Id))
                                        {
                                            <li class="list-group-item d-flex justify-content-between">
                                                <span>@presupuesto.Tipo</span>
                                                <span>@presupuesto.PrecioFinal.ToString("C")</span>
                                                <button class="btn btn-delete btn-sm" @onclick="() => BorrarPresupuesto(presupuesto.Id)">
                                                    <i class="bi bi-trash-fill icon-size"></i>
                                                </button>
                                            </li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p class="no-presupuestos-text">
                                        <i class="bi bi-folder-x"></i> No hay presupuestos asignados a este contrato.
                                    </p>
                                }
                            </div>
                        }
                    </div>

                </div>
            }
        </div>
    }
</div>


<div>@entorno</div>

<style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .title {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 20px;
        color: #343a40;
        text-align: center;
    }

    .loading-text {
        text-align: center;
        color: #888;
    }

    .no-data-text {
        text-align: center;
        color: #888;
    }

    .card {
        border: none; /* Elimina el borde azul */
        border-radius: 12px; /* Bordes redondeados */
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Sombra sutil */
        background: linear-gradient(145deg, #ffffff, #f0f0f0); /* Fondo con un ligero degradado */
        transition: transform 0.3s ease, box-shadow 0.3s ease; /* Animación al pasar el mouse */
    }

        .card:hover {
            transform: translateY(-10px); /* Efecto de elevación */
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2); /* Sombra más pronunciada */
        }

    .card-body {
        padding: 20px;
        color: #333; /* Texto más oscuro y agradable */
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 400;
        color: #333;
        margin-bottom: 10px; /* Reducido margen inferior */
    }

        .card-title + span {
            margin-top: 5px; /* Añadir espacio entre el título y el estado */
            display: block; /* Asegura que el estado se muestre en una nueva línea */
        }

    .card-text {
        font-size: 0.95rem;
        color: #555; /* Texto gris suave */
    }

    .card-footer {
        border-top: 1px solid #eaeaea; /* Línea superior sutil */
        padding: 10px 15px;
        background-color: #f9f9f9; /* Fondo ligeramente gris */
        border-radius: 0 0 12px 12px; /* Coincide con el redondeo de la card */
    }

    .button-group {
        display: flex; /* Alinear botones en línea */
        gap: 10px; /* Espaciado entre botones */
        padding: 10px; /* Espaciado interno */
        background-color: #f0f0f0; /* Fondo gris claro */
        border-radius: 8px; /* Bordes redondeados */
        justify-content: center; /* Centrar botones dentro del grupo */
        align-items: center; /* Centrar verticalmente */
        margin-top: 15px; /* Espaciado respecto al contenido de arriba */
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); /* Sombra ligera */
    }

    .card .btn {
        width: 40px; /* Tamaño cuadrado de los botones */
        height: 40px;
        display: flex;
        align-items: center; /* Centrar ícono verticalmente */
        justify-content: center; /* Centrar ícono horizontalmente */
        font-size: 1rem; /* Tamaño del ícono */
        padding: 0; /* Sin padding */
        margin: 0; /* Sin margen entre botones */
        border-radius: 5px; /* Bordes ligeramente redondeados */
    }

    .card .btn-sm {
        display: inline-block;
        margin: 0; /* Elimina márgenes adicionales */
    }



    .card .d-flex {
        flex-wrap: wrap; /* Permitir que los botones se ajusten si es necesario */
        gap: 5px; /* Espacio mínimo entre botones */
        justify-content: start; /* Alinear botones al inicio */
        align-items: center; /* Asegura que estén centrados verticalmente */
        padding: 0; /* Sin relleno */
        margin: 0; /* Sin margen */
    }

    .list-group-item {
        display: flex;
        justify-content: space-between;
    }

        .list-group-item .btn-delete {
            margin-left: 10px;
        }

    .text-bg-Activo {
        background-color: #28a745;
        padding: 2px 6px;
        color: white;
        border-radius: 5px;
        font-size: 0.85rem;
        font-weight: bold;
    }

    .text-bg-Inactivo {
        background-color: #dc3545;
        padding: 2px 6px;
        color: white;
        border-radius: 5px;
        font-size: 0.85rem;
        font-weight: bold;
    }

    .text-bg-Pendiente {
        background-color: #ffc107;
        padding: 2px 6px;
        color: black;
        border-radius: 5px;
        font-size: 0.85rem;
        font-weight: bold;
    }
</style>


@code {
    private List<Obra> listaContratos;
    private Obra obra = new Obra();
    private EditarObraDTO obradto = new EditarObraDTO();
    private Dictionary<int, string> nombresClientes = new();
    private Dictionary<int, string> nombresInstaladores = new();
    private List<Presupuesto> presupuestos = new();
    private string Mensaje = "";
    private int idSeleccionado = 0; // ID de la obra seleccionada para expandir
    private string entorno;


    private string GetEstadoClase(string estado)
    {
        return estado switch
        {
            "Activo" => "text-success", // Verde
            "Inactivo" => "text-danger", // Rojo
            _ => "text-secondary" // Gris por defecto
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        var uri = Navigation.Uri;
        var queryParameters = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(uri).Query);

        if (queryParameters.TryGetValue("expandId", out var expandIdStr) && int.TryParse(expandIdStr, out var contratoId))
        {
            idSeleccionado = contratoId; // Expandir el contrato con el ID correspondiente
        }
        entorno = await Http.GetStringAsync("api/configuracion/entorno");
        await Leer();
    }

    private void AgregarPresupuesto(int contratoId)
    {
        Navigation.NavigateTo($"/CrearPresupuesto/{contratoId}?expandId={contratoId}");
    }

    public class SwalResult
    {
        public bool? isConfirmed { get; set; }
        public bool? isDenied { get; set; }
        public bool? isDismissed { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        entorno = await Http.GetStringAsync("api/configuracion/entorno");
        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<Obra>>("api/Contratos");
        if (!resp.Error)
        {
            listaContratos = resp.Respuesta;
            await CargarNombresClientes();
            await CargarNombresInstaladores();
            await CargarPresupuestos();
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    private async Task CargarNombresClientes()
    {
        var resp = await http.Get<List<Cliente>>("api/Clientes");
        if (!resp.Error)
        {
            foreach (var cliente in resp.Respuesta)
            {
                nombresClientes[cliente.Id] = $"{cliente.Nombre} {cliente.Apellido}";
            }
        }
    }

    private async Task CargarNombresInstaladores()
    {
        var resp = await http.Get<List<Instalador>>("api/Instaladores");
        if (!resp.Error)
        {
            foreach (var instalador in resp.Respuesta)
            {
                nombresInstaladores[instalador.Id] = $"{instalador.Nombre} {instalador.Apellido}";
            }
        }
    }

    private async Task CargarPresupuestos()
    {
        var resp = await http.Get<List<Presupuesto>>("api/Presupuestos"); // Cambia el endpoint si es necesario
        if (!resp.Error)
        {
            presupuestos = resp.Respuesta;
        }
    }

    private async Task BorrarPresupuesto(int id)
    {
        var result = await Alerta.ConfirmDeletion("¿Está seguro?", "¡No podrás revertir esto!", "Si, eliminarlo.");

        if (result?.isConfirmed == true)
        {
            var respuesta = await http.Delete<Presupuesto>($"api/Presupuestos/{id}");
            if (respuesta.Error)
            {
                Mensaje = "No se pudo borrar el presupuesto";
            }
            await Leer();
            await js.InvokeVoidAsync("Swal.fire", "Éxito", "Presupuesto eliminado correctamente");
        }
        else
        {
            Console.WriteLine("Eliminación cancelada.");
        }
    }

    private async Task BajaObra(int id)
    {
        var result = await Alerta.ConfirmDeletion("¿Está seguro?", "¡No podrás revertir esto!", "Si, confirmar baja.");
        if (result?.isConfirmed == true)
        {

            var contratoId = id;
            var respuesta = await http.Get<Obra>($"api/Contratos/GetById/{contratoId}");
            if (!respuesta.Error)
            {
                obra = respuesta.Respuesta;
            }
            obradto.Id = obra.Id;
            obradto.Estado = "Inactivo";
            obradto.Descripcion = obra.Descripcion;
            obradto.FechaAlta = obra.FechaAlta;
            obradto.FechaBaja = obra.FechaBaja;
            obradto.AnexarServicio = obra.AnexarServicio;
            obradto.InstaladorId = obra.InstaladorId;
            obradto.ClienteId = obra.ClienteId;

            var httpRespuesta = await http.Put<EditarObraDTO>($"api/Contratos/{contratoId}", obradto);
            if (httpRespuesta.Error)
            {
                var body = httpRespuesta.HttpResponseMessage;
            }
            await Leer();
            await js.InvokeVoidAsync("Swal.fire", "Éxito", "Contrato dado de baja");
        }
        else
        {
            Console.WriteLine("Baja cancelada.");
        }
    }

    private async Task Editar(int id)
    {
        Navigation.NavigateTo($"/Contratos/editar/{id}");
    }

    private async Task Eliminar(int id)
    {
        var result = await Alerta.ConfirmDeletion("¿Está seguro?", "¡Esto eliminara los presupuestos asociados!", "Si, eliminarlo.");

        if (result?.isConfirmed == true)
        {
            await Borrar(id);
            await js.InvokeVoidAsync("Swal.fire", "Exito!", "Documento Eliminado");
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Eliminación cancelada.");
        }
    }

    private async Task Borrar(int id)
    {
        // Primero eliminamos los presupuestos asociados a la obra
        var respuestaPresupuestos = await http.Get<List<Presupuesto>>($"api/Presupuestos?obraId={id}");
        if (respuestaPresupuestos.Error)
        {
            Mensaje = "No se pudo obtener los presupuestos de la obra";
            return;
        }

        // Borrar cada presupuesto relacionado con la obra
        foreach (var presupuesto in respuestaPresupuestos.Respuesta)
        {
            var respuestaEliminarPresupuesto = await http.Delete<Presupuesto>($"api/Presupuestos/{presupuesto.Id}");
            if (respuestaEliminarPresupuesto.Error)
            {
                Mensaje = "No se pudo borrar un presupuesto";
                return;
            }
        }

        // Ahora eliminamos el contrato (Obra)
        var respuestaEliminarContrato = await http.Delete<Obra>($"api/Contratos/{id}");
        if (respuestaEliminarContrato.Error)
        {
            Mensaje = "No se pudo borrar el contrato";
            return;
        }

        // Actualizamos la lista después de borrar los presupuestos y el contrato
        await Leer();
    }


    private void ExpandirPresupuestos(int id)
    {
        // Si ya se está mostrando, se contrae
        idSeleccionado = (idSeleccionado == id) ? 0 : id;
    }
}