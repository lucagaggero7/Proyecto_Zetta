@page "/api/Contratos"

@inject IHttpServicio http
@inject IJSRuntime js
@inject AlertaServicio Alerta
<h3>Lista de Contratos</h3>

<a class="btn btn-primary nuevo-contrato-btn" href="/api/Contratos/crear">Nuevo Contrato</a>

<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 12px;
        text-align: left;
        border: 1px solid #ddd;
    }

    th {
        background-color: #f2f2f2;
    }

    .nuevo-contrato-btn {
        margin-bottom: 20px;
        transition: opacity 0.3s ease;
    }

        .nuevo-contrato-btn:hover,
        .editar-contrato-btn:hover,
        .eliminar-contrato-btn:hover {
            opacity: 0.8;
        }
</style>

@if (!string.IsNullOrEmpty(Mensaje))
{
    <p>Error: @Mensaje</p>
}
else if (listaContratos == null)
{
    <p>Buscando...</p>
}
else if (listaContratos.Count == 0)
{
    <p>No existen contratos</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Estado</th>
                <th>Tipo</th>
                <th>Descripción</th>
                <th>Fecha de Alta</th>
                <th>Instalador Id</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in listaContratos)
            {
                <tr>
                    <td>@item.Estado</td>
                    <td>@item.Tipo</td>
                    <td>@item.Descripcion</td>
                    <td>@item.FechaAlta.ToString("dd/MM/yyyy")</td>
                    <td>@item.InstaladorId</td>
                    <td>
                        <a class="btn btn-primary editar-contrato-btn" href="api/Contratos/editar/@item.Id">Editar</a>
                        <a class="btn btn-danger eliminar-contrato-btn" @onclick="() => Eliminar(item.Id)">Eliminar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Obra> listaContratos;
    private string Mensaje = "";

    public class SwalResult
    {
        public bool? isConfirmed { get; set; }
        public bool? isDenied { get; set; }
        public bool? isDismissed { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {

        await Leer();
    }

    private async Task Eliminar(int id)
    {
        var result = await Alerta.ConfirmDeletion("¿Está seguro?", "¡No podrás revertir esto!");

        if (result?.isConfirmed == true)
        {
            await Borrar(id);
            await js.InvokeVoidAsync("Swal.fire", "mostrarAlerta", "Documento Eliminado");
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Eliminación cancelada.");
        }
    }

    private async Task Borrar(int id)
    {
        var respuesta = await http.Delete<Obra>($"api/Contratos/{id}");
        if (respuesta.Error)
        {
            Mensaje = "No se pudo borrar el contrato";
        }
        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<Obra>>("api/Contratos");
        if (!resp.Error)
        {
            listaContratos = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }
}
