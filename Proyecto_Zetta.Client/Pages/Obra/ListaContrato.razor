@page "/Contratos"
@using Proyecto_Zetta.Shared.DTO

@inject IHttpServicio http
@inject IJSRuntime js
@inject AlertaServicio Alerta
@inject NavigationManager Navigation

<div class="container">
    <h3 class="title">Lista de Contratos</h3>

    <a class="btn btn-add" href="/Contratos/crear">
        <i class="bi bi-plus-circle me-2"></i> Nuevo Contrato
    </a>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle-fill"></i> Error: @Mensaje
        </div>
    }
    else if (listaContratos == null)
    {
        <p class="loading-text"><i class="bi bi-arrow-repeat"></i> Buscando...</p>
    }
    else if (listaContratos.Count == 0)
    {
        <p class="no-data-text"><i class="bi bi-folder-x"></i> No existen contratos</p>
    }
    else
    {
        <div class="table-responsive shadow-lg rounded">
            <table class="table table-hover table-custom">
                <thead class="table-light">
                    <tr>
                        <th>Estado</th>
                        <th>Descripción</th>
                        <th>Fecha de Alta</th>
                        <th>Instalador</th>
                        <th>Cliente</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in listaContratos)
                    {
                        <tr>
                            <td>@item.Estado</td>
                            <td>@item.Descripcion</td>
                            <td>@item.FechaAlta.ToString("dd/MM/yyyy")</td>
                            <td>@(nombresInstaladores.ContainsKey(item.InstaladorId) ? nombresInstaladores[item.InstaladorId] : "Desconocido")</td>
                            <td>@(nombresClientes.ContainsKey(item.ClienteId) ? nombresClientes[item.ClienteId] : "Desconocido")</td>
                            <td class="text-center">
                                <button class="btn btn-expand btn-sm" 
                                    @onclick="() => ExpandirPresupuestos(item.Id)" 
                                    title="Ver presupuestos">
                                    <i class="bi bi-chevron-down"></i> <!-- Icono de expansión -->
                                </button>
                                <button class="btn btn-edit btn-sm" 
                                    @onclick="() => Editar(item.Id)" 
                                    title="Editar contrato">
                                    <i class="bi bi-pencil-fill icon-size"></i>
                                </button>
                                <button class="btn btn-danger btn-sm" 
                                    @onclick="() => Eliminar(item.Id)" 
                                    title="Eliminar contrato">
                                    <i class="bi bi-trash-fill icon-size"></i>
                                </button>
                                <button class="btn btn-primary btn-sm" 
                                    @onclick="() => AgregarPresupuesto(item.Id)" 
                                    title="Agregar Presupuesto">
                                    <i class="bi bi-plus-circle icon-size"></i>
                                </button>
                                <button class="btn btn-warning btn-sm @(item.Estado == "Inactivo" ? "disabled" : "")"
                                        @onclick="() => BajaObra(item.Id)"
                                        title="Dar de baja">
                                    <i class="bi bi-file-earmark-excel icon-size"></i>
                                </button>
                            </td>
                        </tr>
                        @if (item.Id == idSeleccionado)
                        {
                            <tr>
                                <td colspan="6">
                                    <div class="table-responsive">
                                        @if (presupuestos.Any(p => p.ObraId == item.Id))
                                        {
                                            <table class="table table-bordered">
                                                <thead>
                                                    <tr>
                                                        <th>Tipo de Presupuesto</th>
                                                        <th>Precio Final</th>
                                                        <th>Acciones</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var presupuesto in presupuestos.Where(p => p.ObraId == item.Id))
                                                    {
                                                        <tr>
                                                            <td>@presupuesto.Tipo</td>
                                                            <td>@presupuesto.PrecioFinal.ToString("C")</td>
                                                            <td class="text-center">
                                                                <button class="btn btn-delete btn-sm" @onclick="() => BorrarPresupuesto(presupuesto.Id)">
                                                                    <i class="bi bi-trash-fill icon-size"></i>
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        }
                                        else
                                        {
                                            <p class="no-presupuestos-text">
                                                <i class="bi bi-folder-x"></i> No hay presupuestos asignados a este contrato.
                                            </p>
                                        }

                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</div>


<style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .title {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 20px;
        color: #343a40;
        text-align: center;
    }

    .loading-text {
    text-align: center;
    color: #888;
    }

    .no-data-text {
    text-align: center;
    color: #888;
    }

    .table-responsive {
    overflow-x: auto;
    margin-top: 20px;
    border-radius: 8px;
    background: white;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .table-custom {
    border-collapse: collapse;
    }

    .table th {
    text-align: center; /* Centrar texto en los encabezados */
    font-weight: bold;
    background-color: #007bff;
    color: white;
    }

    .table td, .table th {
    padding: 12px 15px;
    vertical-align: middle;
    text-align: center; /* Centrar texto en las celdas */
    white-space: nowrap; /* Evita que el texto se divida en varias líneas */
    overflow: hidden; /* Oculta el desbordamiento */
    text-overflow: ellipsis; /* Agrega "..." si el texto es demasiado largo */
    }

    .table-hover tbody tr:hover {
    background-color: #f1f1f1;
    cursor: pointer;
    }



    .icon-size {
    font-size: 1.2rem;
    }

</style>

@code {
    private List<Obra> listaContratos;
    private Obra obra = new Obra();
    private EditarObraDTO obradto = new EditarObraDTO();
    private Dictionary<int, string> nombresClientes = new();
    private Dictionary<int, string> nombresInstaladores = new();
    private List<Presupuesto> presupuestos = new();
    private string Mensaje = "";
    private int idSeleccionado = 0; // ID de la obra seleccionada para expandir

    protected override async Task OnParametersSetAsync()
    {
        var uri = Navigation.Uri;
        var queryParameters = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(uri).Query);

        if (queryParameters.TryGetValue("expandId", out var expandIdStr) && int.TryParse(expandIdStr, out var contratoId))
        {
            idSeleccionado = contratoId; // Expandir el contrato con el ID correspondiente
        }

        await Leer();
    }

    private void AgregarPresupuesto(int contratoId)
    {
        Navigation.NavigateTo($"/CrearPresupuesto/{contratoId}?expandId={contratoId}");
    }

    public class SwalResult
    {
        public bool? isConfirmed { get; set; }
        public bool? isDenied { get; set; }
        public bool? isDismissed { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<Obra>>("api/Contratos");
        if (!resp.Error)
        {
            listaContratos = resp.Respuesta;
            await CargarNombresClientes();
            await CargarNombresInstaladores();
            await CargarPresupuestos();
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    private async Task CargarNombresClientes()
    {
        var resp = await http.Get<List<Cliente>>("api/Clientes");
        if (!resp.Error)
        {
            foreach (var cliente in resp.Respuesta)
            {
                nombresClientes[cliente.Id] = $"{cliente.Nombre} {cliente.Apellido}";
            }
        }
    }

    private async Task CargarNombresInstaladores()
    {
        var resp = await http.Get<List<Instalador>>("api/Instaladores");
        if (!resp.Error)
        {
            foreach (var instalador in resp.Respuesta)
            {
                nombresInstaladores[instalador.Id] = $"{instalador.Nombre} {instalador.Apellido}";
            }
        }
    }

    private async Task CargarPresupuestos()
    {
        var resp = await http.Get<List<Presupuesto>>("api/Presupuestos"); // Cambia el endpoint si es necesario
        if (!resp.Error)
        {
            presupuestos = resp.Respuesta;
        }
    }

    private async Task BorrarPresupuesto(int id)
    {
        var result = await Alerta.ConfirmDeletion("¿Está seguro?", "¡No podrás revertir esto!", "Si, eliminarlo.");

        if (result?.isConfirmed == true)
        {
            var respuesta = await http.Delete<Presupuesto>($"api/Presupuestos/{id}");
            if (respuesta.Error)
            {
                Mensaje = "No se pudo borrar el presupuesto";
            }
            await Leer();
            await js.InvokeVoidAsync("Swal.fire", "Éxito", "Presupuesto eliminado correctamente");
        }
        else
        {
            Console.WriteLine("Eliminación cancelada.");
        }
    }

    private async Task BajaObra(int id)
    {
        var result = await Alerta.ConfirmDeletion("¿Está seguro?", "¡No podrás revertir esto!", "Si, confirmar baja.");
        if (result?.isConfirmed == true)
        {

            var contratoId = id;
            var respuesta = await http.Get<Obra>($"api/Contratos/GetById/{contratoId}");
            if (!respuesta.Error)
            {
                obra = respuesta.Respuesta;
            }
            obradto.Id = obra.Id;
            obradto.Estado = "Inactivo";
            obradto.Descripcion = obra.Descripcion;
            obradto.FechaAlta = obra.FechaAlta;
            obradto.FechaBaja = obra.FechaBaja;
            obradto.AnexarServicio = obra.AnexarServicio;
            obradto.InstaladorId = obra.InstaladorId;
            obradto.ClienteId = obra.ClienteId;

            var httpRespuesta = await http.Put<EditarObraDTO>($"api/Contratos/{contratoId}", obradto);
            if (httpRespuesta.Error)
            {
                var body = httpRespuesta.HttpResponseMessage;
            }
            await Leer();
            await js.InvokeVoidAsync("Swal.fire", "Éxito", "Contrato dado de baja");
        }
        else
        {
            Console.WriteLine("Baja cancelada.");
        }
    }

    private async Task Editar(int id)
    {
        Navigation.NavigateTo($"/Contratos/editar/{id}");
    }

    private async Task Eliminar(int id)
    {
        var result = await Alerta.ConfirmDeletion("¿Está seguro?", "¡Esto eliminara los presupuestos asociados!", "Si, eliminarlo.");

        if (result?.isConfirmed == true)
        {
            await Borrar(id);
            await js.InvokeVoidAsync("Swal.fire", "Exito!", "Documento Eliminado");
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Eliminación cancelada.");
        }
    }

    private async Task Borrar(int id)
    {
        // Primero eliminamos los presupuestos asociados a la obra
        var respuestaPresupuestos = await http.Get<List<Presupuesto>>($"api/Presupuestos?obraId={id}");
        if (respuestaPresupuestos.Error)
        {
            Mensaje = "No se pudo obtener los presupuestos de la obra";
            return;
        }

        // Borrar cada presupuesto relacionado con la obra
        foreach (var presupuesto in respuestaPresupuestos.Respuesta)
        {
            var respuestaEliminarPresupuesto = await http.Delete<Presupuesto>($"api/Presupuestos/{presupuesto.Id}");
            if (respuestaEliminarPresupuesto.Error)
            {
                Mensaje = "No se pudo borrar un presupuesto";
                return;
            }
        }

        // Ahora eliminamos el contrato (Obra)
        var respuestaEliminarContrato = await http.Delete<Obra>($"api/Contratos/{id}");
        if (respuestaEliminarContrato.Error)
        {
            Mensaje = "No se pudo borrar el contrato";
            return;
        }

        // Actualizamos la lista después de borrar los presupuestos y el contrato
        await Leer();
    }


    private void ExpandirPresupuestos(int id)
    {
        // Si ya se está mostrando, se contrae
        idSeleccionado = (idSeleccionado == id) ? 0 : id;
    }
}
